> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [mp.weixin.qq.com](https://mp.weixin.qq.com/s?__biz=MzU5NzcwNzcwNQ==&mid=2247494726&idx=2&sn=dc9cff02134dca33757f982037e2405c&chksm=ff421537ca77b2e580b822c44a9197ca0420a832c949942c63fc14aa1d2fccbd51d699ed3913&scene=132&exptype=timeline_recommend_article_extendread_samebiz&show_related_article=1&subscene=0&scene=132#wechat_redirect)

在 C# 中，遍历并删除 List 中的元素是一项常见的操作。然而，不正确的实现方式可能会导致集合修改异常（如 InvalidOperationException）或逻辑错误。本文将介绍几种安全且高效的方法来遍历并删除 List 中的元素。

**一、使用 foreach 循环与临时集合**

最直观的方法是使用 foreach 循环遍历 List，并将需要删除的元素添加到一个临时集合中。遍历完成后，使用临时集合来删除元素。

```
List<int> myList = new List<int> { 1, 2, 3, 4, 5 };List<int> toRemove = new List<int>();foreach (int item in myList){    // 判断是否满足删除条件    if (item == 2 || item == 4)    {        toRemove.Add(item);    }}// 使用临时集合删除元素foreach (int item in toRemove){    myList.Remove(item);}
```

这种方法虽然简单，但在大型集合上可能效率不高，因为 Remove 操作是 O(n) 时间复杂度。

**二、使用 for 循环与索引**

如果删除操作相对频繁，或者 List 中元素数量较多，可以使用 for 循环直接操作索引，这样删除元素时不需要重新查找。

```
List<int> myList = new List<int> { 1, 2, 3, 4, 5 };for (int i = 0; i < myList.Count; i++){    // 判断是否满足删除条件    if (myList[i] == 2 || myList[i] == 4)    {        myList.RemoveAt(i);        i--; // 因为删除了一个元素，索引减1，以跳过下一个元素    }}
```

使用 for 循环和索引删除元素时，要注意在删除元素后调整索引，以避免跳过某些元素。

**三、使用 LINQ**

如果你更倾向于使用声明式编程，可以利用 LINQ（Language-Integrated Query）来过滤 List 中的元素，并生成一个新的 List。

```
List<int> myList = new List<int> { 1, 2, 3, 4, 5 };// 使用LINQ过滤元素myList = myList.Where(item => item != 2 && item != 4).ToList();
```

使用 LINQ 时，需要注意这将会创建一个新的 List，原 List 不会被修改。

**四、使用 List 的 RemoveAll 方法**

对于基于条件的批量删除，List 类提供了一个方便的 RemoveAll 方法。

```
List<int> myList = new List<int> { 1, 2, 3, 4, 5 };// 使用RemoveAll一次性删除所有符合条件的元素myList.RemoveAll(item => item == 2 || item == 4);
```

RemoveAll 方法会一次性删除所有满足条件的元素，比逐个删除更高效。

**总结**

遍历并删除 List 中的元素时，应该根据具体场景选择合适的方法。对于少量删除操作，可以使用 foreach 循环与临时集合；如果删除操作较多，或者 List 中元素数量大，建议使用 for 循环与索引或 RemoveAll 方法。LINQ 提供了一种简洁的声明式编程方式，适用于不需要修改原 List 的情况。无论选择哪种方法，都要确保在遍历过程中不直接修改正在遍历的集合，以避免潜在的异常。