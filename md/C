> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [mp.weixin.qq.com](https://mp.weixin.qq.com/s/6WrUqBVp0EC0bBiY4SjW0Q)

在 C# 中，生成唯一 ID 是一个常见的需求，尤其在处理数据库记录、文件命名、会话管理等场景中。唯一 ID 的生成方式多种多样，每种方式都有其特定的应用场景和优缺点。本文将介绍几种在 C# 中生成唯一 ID 的常用方法。  

**1. 使用 GUID**

GUID（全局唯一标识符）是一种 128 位的字符串，通常由 32 个十六进制数字组成，分为 5 段，形式如 `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`。在 C# 中，可以使用 `System.Guid` 类来生成 GUID。

```csharp

Guid uniqueId = Guid.NewGuid();

string uniqueIdString = uniqueId.ToString();

```

GUID 的优点是生成速度快，全球唯一，无需查询数据库即可确保唯一性。缺点是生成的 ID 较长，不易于人工记忆，且在数据库中存储和索引可能不如整数类型高效。

**2. 使用数据库自增 ID**

在关系型数据库中，通常可以设置主键列为自增字段（如 SQL Server 中的 IDENTITY 属性，MySQL 中的 AUTO_INCREMENT），这样每次插入新记录时，数据库会自动为该字段生成一个唯一的整数值。

在 C# 中，通过执行插入操作并检索新记录的 ID，可以获得这个唯一值。这种方法适用于需要与数据库紧密集成的场景。

```csharp

// 假设使用 ADO.NET 或 Entity Framework 等 ORM 框架执行插入操作

int newId = InsertRecordAndReturnId(record);

```

自增 ID 的优点是整数类型，易于处理和存储。缺点是必须依赖于数据库，且在分布式系统中可能需要额外的协调机制来确保全局唯一性。

**3. 使用雪花算法（Snowflake Algorithm）**

雪花算法是 Twitter 开源的一种分布式系统中生成唯一 ID 的算法。它生成的 ID 是一个 64 位的整数，结构包括时间戳、工作机器 ID、数据中心 ID 和序列号等部分，能够在分布式环境下生成全局唯一的 ID。

在 C# 中，可以使用现有的库（如 IdGen）或自己实现雪花算法来生成唯一 ID。

```csharp

// 假设使用 IdGen 库

var generator = new IdGenerator(0); // 0 是工作机器 ID，需要根据实际情况设置

long uniqueId = generator.CreateId();

```

雪花算法的优点是生成的 ID 是一个整数，趋势递增，易于排序和分片。同时，它考虑了分布式环境的需求，能够在不同机器上生成全局唯一的 ID。缺点是算法实现相对复杂，需要合理设置工作机器 ID 和数据中心 ID 等参数。

**4. 自定义算法 **

除了上述方法外，还可以根据具体需求自定义唯一 ID 的生成算法。例如，可以结合时间戳、随机数、机器标识等信息来生成唯一 ID。这种方法的灵活性较高，但需要注意确保生成的 ID 的全局唯一性。

** 总结 **

在 C# 中生成唯一 ID 的方法多种多样，每种方法都有其适用场景和优缺点。在选择生成唯一 ID 的方法时，需要根据具体需求、系统架构和性能要求来综合考虑。GUID 适用于需要全局唯一且不关心 ID 长度的场景；数据库自增 ID 适用于与数据库紧密集成的场景；雪花算法适用于分布式系统中需要全局唯一且趋势递增的 ID；而自定义算法则可以根据具体需求进行灵活设计。