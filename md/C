> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [mp.weixin.qq.com](https://mp.weixin.qq.com/s/J0b2N52F0vbMOLtmk13HSQ)

在 C# 编程语言中，“=>”符号是一个非常重要的操作符，它通常用于定义 Lambda 表达式和表达式体定义。Lambda 表达式提供了一种简洁且富有表现力的方式来编写匿名函数，而表达式体定义则允许我们以更简洁的方式编写方法体。本文将详细讨论 “=>” 操作符在 C# 中的使用，包括其语法、特性以及在实际编程中的应用。

一、Lambda 表达式

Lambda 表达式是一种匿名函数，它可以包含表达式或语句块，并且可以捕获其所在范围的变量。Lambda 表达式的基本语法如下：

```
(input-parameters) => expression-or-statement-block<br style="visibility: visible;">
```

其中，`input-parameters`是 Lambda 表达式的参数列表，可以是零个、一个或多个参数。`expression-or-statement-block`是 Lambda 表达式的主体，可以是一个表达式或一个语句块。

Lambda 表达式在 C# 中广泛应用于各种需要委托或函数式编程的场景，例如 LINQ 查询、事件处理、异步编程等。以下是一个简单的 Lambda 表达式示例，用于对一个整数列表进行筛选：

```
List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };List<int> evenNumbers = numbers.Where(n => n % 2 == 0).ToList();
```

在这个例子中，我们使用了 Lambda 表达式`n => n % 2 == 0`作为`Where`方法的参数，用于筛选偶数。

二、表达式体定义

除了 Lambda 表达式外，“=>”操作符还用于表达式体定义。在 C# 6.0 及更高版本中，引入了更简洁的方法体定义方式，即使用 “=>” 来直接返回表达式的值或执行单个语句。这种定义方式通常用于只有一个语句的方法体或属性。

例如，以下是一个使用表达式体定义的方法：

```
public int Square(int x) => x * x;
```

这个`Square`方法使用表达式体定义，直接返回输入参数`x`的平方。这种定义方式比传统的方法体定义更简洁。

类似地，我们也可以使用表达式体定义来简化属性的实现：

```
public string Name { get; set; }public string Greeting => "Hello, " + Name;
```

在这个例子中，`Greeting`属性使用了表达式体定义，它返回一个包含`Name`属性的字符串。

三、特点与优势

使用 “=>” 操作符的 Lambda 表达式和表达式体定义具有以下特点和优势：

1.  **简洁性**：通过减少冗余的语法和代码量，使代码更加简洁易读。
    
2.  **灵活性**：Lambda 表达式可以作为参数传递给方法，也可以作为委托或表达式的赋值目标，为函数式编程提供了强大的支持。
    
3.  **可读性**：通过命名参数和直接返回表达式的方式，使代码意图更加明确，提高了代码的可读性。
    
4.  **性能**：在某些情况下，编译器可以对 Lambda 表达式和表达式体定义进行优化，提高代码的执行效率。
    

四、总结

“=>”操作符在 C# 中扮演着重要的角色，它使得 Lambda 表达式和表达式体定义成为可能，为编程提供了更多的灵活性和简洁性。通过掌握 “=>” 操作符的使用方法和技巧，我们可以编写出更加高效、易读和可维护的代码。在实际编程中，我们应该根据具体场景选择合适的方式来使用 “=>” 操作符，以充分发挥其优势。